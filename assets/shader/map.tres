[gd_resource type="ShaderMaterial" load_steps=10 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;



uniform int render = 0;
// 0 : Temperature | Humidity | Humidity
// 1 : Mushiness   | NA       | Mushiness
uniform int       temperature_seed  = 0    ;
uniform sampler2D temperature_map          ;
uniform sampler2D temperature_curve        ;
uniform float     temperature_scale = 25.0 ;
uniform int       humidity_seed     = 1    ;
uniform sampler2D humidity_map             ;
uniform sampler2D humidity_curve           ;
uniform float     humidity_scale    = 25.0 ;



vec3 permute(vec3 x, int seed) {
	return mod((x * 34.0 + 1.0) * x, 289.0 + float(seed));
}
float noise(vec2 v, int seed) {
	const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
	vec2 i = floor(v + dot(v, C.yy));
	vec2 x0 = v - i + dot(i, C.xx);
	vec2 i1;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;
	i = mod(i, 289.0);
	vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0), seed) + i.x + vec3(0.0, i1.x, 1.0), seed);
	vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
	m = m * m;
	m = m * m;
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
	vec3 g;
	g.x = a0.x * x0.x + h.x * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	float l = 130.0 * dot(m, g);
	return l / 2.0 + 0.5;
}

float interpolate(float a, float b, float t) {
	return a + (b - a) * t;
}



void fragment() {
	float dist = distance(UV, vec2(0.5)) * 2.0;
	if (dist > 1.0) {
		COLOR = vec4(0.0);
		return;
	}
	float temperature_noise = texture(temperature_map, vec2(noise(UV * temperature_scale, temperature_seed), 0.0)).r;
	float temperature_value = texture(temperature_curve, vec2(dist, 0.0)).r;
	float temperature       = interpolate(temperature_noise, interpolate(0.5, 1.0, temperature_value), abs(temperature_value * 2.0 - 1.0));
	float humidity_noise    = texture(humidity_map, vec2(noise(UV * humidity_scale, humidity_seed), 0.0)).r;
	float humidity_value    = texture(humidity_curve, vec2(dist, 0.0)).r;
	float humidity          = interpolate(humidity_noise, interpolate(0.0, 1.0, humidity_value), abs(humidity_value * 2.0 - 1.0));
	vec3 colour             = vec3(0.0);
	if (render == 0) {
		temperature = clamp(temperature, 0.0, 1.0);
		humidity    = clamp(humidity, 0.0, 1.0);
		colour      = vec3(temperature, humidity, humidity);
	}
	else if (render == 1) {
		float mushiness = humidity;
		colour = vec3(mushiness, 0.0, mushiness);
	}
	COLOR = vec4(colour, 1.0);
}
"

[sub_resource type="Curve" id=6]
_data = [ Vector2( 0, 1 ), 0.0, -0.0697557, 0, 0, Vector2( 0.155702, 0.746591 ), -1.82888, -1.82888, 0, 0, Vector2( 1, 0 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=7]
curve = SubResource( 6 )

[sub_resource type="Curve" id=8]
_data = [ Vector2( 0, 0 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=9]
curve = SubResource( 8 )

[sub_resource type="Curve" id=2]
_data = [ Vector2( 0, 0 ), 0.0, 0.0, 0, 0, Vector2( 0.0350877, 0 ), 0.0, 0.0, 0, 0, Vector2( 0.0899123, 0.5 ), 0.0, 0.0, 0, 0, Vector2( 0.657895, 0.5 ), 0.0, 0.0, 0, 0, Vector2( 0.881579, 0.860227 ), 4.58961, 4.58961, 0, 0, Vector2( 0.967105, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 1 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=3]
curve = SubResource( 2 )

[sub_resource type="Curve" id=4]
_data = [ Vector2( 0, 0 ), 0.0, 0.0, 0, 0, Vector2( 1, 0.747727 ), 2.00587, 0.0, 0, 0 ]

[sub_resource type="CurveTexture" id=5]
curve = SubResource( 4 )

[resource]
shader = SubResource( 1 )
shader_param/render = 0
shader_param/temperature_seed = 0
shader_param/temperature_scale = 25.0
shader_param/humidity_seed = 1
shader_param/humidity_scale = 25.0
shader_param/temperature_map = SubResource( 5 )
shader_param/temperature_curve = SubResource( 3 )
shader_param/humidity_map = SubResource( 9 )
shader_param/humidity_curve = SubResource( 7 )
